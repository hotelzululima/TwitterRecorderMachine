#!/usr/bin/python
#DESC: temporal analysis has steadily evolved. First it was activity
#DESC: by day, then also by hour, and in the latest revision we get a
#DESC: 7x24 matrix of tweets per hour. Since we are almost always 
#DESC: wanting to compare two accounts, the activity is normalized 
#DESC: between 0 and 1. The sock will show the same activity times
#DESC: as the operator (if they are unskilled), but the volume will
#DESC: be much lower. There are spreadsheets that take this XLS file
#DESC: as input and there are Euclidean distances calculated for 
#DESC: hour of day and day of week.

import datetime, sys, re, xlwt

heat = [[0 for x in xrange(7)] for x in xrange(24)] 

#the latest tweets for an account are always in a scratch
#file that is simply the same name as the screen name.
#this is probably just flat wrong, the right thing would be
#an automated lookback for one week, or maybe since the
#beginning of time. This isn't a common process, it's 
#reserved for the biggest nuisance sock puppet operators
#so it's run manually after the input file is massaged
#to suit the analyst's purpose

f = open(sys.argv[1], 'r')
xlsout = sys.argv[1].rsplit("-")[0] + ".xls"
print "creating " + xlsout

xam = 0
for line in f:
   words = line.rsplit(" ")

   ddate = words[1].rsplit("-")
   idx = datetime.date(int(ddate[0]), int(ddate[1]), int(ddate[2])).weekday()

   hhour = words[2].rsplit(":")
   hr    = int(hhour[0])

   heat[hr][idx] = heat[hr][idx] + 1
   #print "day: " + str(idx) + " hour: " + str(hr) + " cnt: " + str(heat[hr][idx])
   if heat[hr][idx] > xam:
      xam = heat[hr][idx]
      #print "newmax: " + str(xam)

print "done loading ..."



book = xlwt.Workbook(encoding="utf-8")
sheet1 = book.add_sheet("timesig")

for x in xrange(7):
    for y in xrange(24):
        #print "x: " + str(x) + " y: " + str(y) + " k: " + str(heat[y][x])
        k = float(heat[y][x]) / float(xam)
        sheet1.write(x,y,k)

book.save(xlsout)

